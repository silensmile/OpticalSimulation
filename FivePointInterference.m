%% 五孔干涉
clear;tic;

%% 参数设定
positionOfSourse = 0;                %光源位置
distanceOfSourseAndPoint = 0.1;      %光源到孔平面的距离
distanceOfPointAndScreen = 1;        %孔到屏幕的距离
radius = 0.000005;                    %孔到原点的距离   
point1x = radius *cos(13*pi/20) ; point1y = radius *sin(13*pi/20);      %第一个孔的坐标
point2x = radius *cos(21*pi/20) ; point2y = radius *sin(21*pi/20);      %第二个孔的坐标 
point3x = radius *cos(29*pi/20) ; point3y = radius *sin(29*pi/20);      %第三个孔的坐标 
point4x = radius *cos(37*pi/20) ; point4y = radius *sin(37*pi/20);      %第四个孔的坐标
point5x = radius *cos(pi/4)     ; point5y = radius *sin(pi/4);      %第五个孔的坐标
wavelength = 550 * 10^-9;            %波长
amplitude = 1;                       %振幅   
intensityOfWave = 1;                 %光强
[X1,Y1] = meshgrid( 0 : 0.01 : 5 , 0 : 0.01 : 5 );     %屏上的采样点
[X2,Y2] = meshgrid(-5 : 0.01 : 0 , 0 : 0.01 : 5 );
[X3,Y3] = meshgrid(-5 : 0.01 : 0 ,-5 : 0.01 : 0 );
[X4,Y4] = meshgrid( 0 : 0.01 : 5 ,-5 : 0.01 : 0 );
%% 计算部分
% 由于计算机硬件原因 采取分块计算
%% 一象限
% 计算距离
distanceToPoint1 = sqrt(point1x ^2 + point1y ^2 + distanceOfSourseAndPoint ^2) + ...
    sqrt((X1 - point1x ).^2 + (Y1 - point1y ).^2 + distanceOfPointAndScreen ^2);
distanceToPoint2 = sqrt(point2x ^2 + point2y ^2 + distanceOfSourseAndPoint ^2) + ...
    sqrt((X1 - point2x ).^2 + (Y1 - point2y ).^2 + distanceOfPointAndScreen ^2);
distanceToPoint3 = sqrt(point3x ^2 + point3y ^2 + distanceOfSourseAndPoint ^2) + ...
    sqrt((X1 - point3x ).^2 + (Y1 - point3y ).^2 + distanceOfPointAndScreen ^2);
distanceToPoint4 = sqrt(point4x ^2 + point4y ^2 + distanceOfSourseAndPoint ^2) + ...
    sqrt((X1 - point4x ).^2 + (Y1 - point4y ).^2 + distanceOfPointAndScreen ^2);
distanceToPoint5 = sqrt(point5x ^2 + point5y ^2 + distanceOfSourseAndPoint ^2) + ...
    sqrt((X1 - point5x ).^2 + (Y1 - point5y ).^2 + distanceOfPointAndScreen ^2);
% 计算强度
finalIntensity1 = (amplitude *cos( 2 * pi * distanceToPoint1 / wavelength ) + ...
    amplitude *cos( 2 * pi * distanceToPoint2 / wavelength ) + ...
    amplitude *cos( 2 * pi * distanceToPoint3 / wavelength ) + ...
    amplitude *cos( 2 * pi * distanceToPoint4 / wavelength ) + ...
    amplitude *cos( 2 * pi * distanceToPoint5 / wavelength )).^2+...
    (amplitude*sin( 2 * pi * distanceToPoint1 / wavelength ) + ...
    amplitude *sin( 2 * pi * distanceToPoint2 / wavelength ) + ...
    amplitude *sin( 2 * pi * distanceToPoint3 / wavelength ) + ...
    amplitude *sin( 2 * pi * distanceToPoint4 / wavelength ) + ...
    amplitude *sin( 2 * pi * distanceToPoint5 / wavelength )).^2;


%% 二象限
% 计算距离
distanceToPoint1 = sqrt(point1x ^2 + point1y ^2 + distanceOfSourseAndPoint ^2) + ...
    sqrt((X2 - point1x ).^2 + (Y2 - point1y ).^2 + distanceOfPointAndScreen ^2);
distanceToPoint2 = sqrt(point2x ^2 + point2y ^2 + distanceOfSourseAndPoint ^2) + ...
    sqrt((X2 - point2x ).^2 + (Y2 - point2y ).^2 + distanceOfPointAndScreen ^2);
distanceToPoint3 = sqrt(point3x ^2 + point3y ^2 + distanceOfSourseAndPoint ^2) + ...
    sqrt((X2 - point3x ).^2 + (Y2 - point3y ).^2 + distanceOfPointAndScreen ^2);
distanceToPoint4 = sqrt(point4x ^2 + point4y ^2 + distanceOfSourseAndPoint ^2) + ...
    sqrt((X2 - point4x ).^2 + (Y2 - point4y ).^2 + distanceOfPointAndScreen ^2);
distanceToPoint5 = sqrt(point5x ^2 + point5y ^2 + distanceOfSourseAndPoint ^2) + ...
    sqrt((X2 - point5x ).^2 + (Y2 - point5y ).^2 + distanceOfPointAndScreen ^2);
% 计算强度
finalIntensity2 = (amplitude *cos( 2 * pi * distanceToPoint1 / wavelength ) + ...
    amplitude *cos( 2 * pi * distanceToPoint2 / wavelength ) + ...
    amplitude *cos( 2 * pi * distanceToPoint3 / wavelength ) + ...
    amplitude *cos( 2 * pi * distanceToPoint4 / wavelength ) + ...
    amplitude *cos( 2 * pi * distanceToPoint5 / wavelength )).^2+...
    (amplitude*sin( 2 * pi * distanceToPoint1 / wavelength ) + ...
    amplitude *sin( 2 * pi * distanceToPoint2 / wavelength ) + ...
    amplitude *sin( 2 * pi * distanceToPoint3 / wavelength ) + ...
    amplitude *sin( 2 * pi * distanceToPoint4 / wavelength ) + ...
    amplitude *sin( 2 * pi * distanceToPoint5 / wavelength )).^2;

%% 三象限
% 计算距离
distanceToPoint1 = sqrt(point1x ^2 + point1y ^2 + distanceOfSourseAndPoint ^2) + ...
    sqrt((X3 - point1x ).^2 + (Y3 - point1y ).^2 + distanceOfPointAndScreen ^2);
distanceToPoint2 = sqrt(point2x ^2 + point2y ^2 + distanceOfSourseAndPoint ^2) + ...
    sqrt((X3 - point2x ).^2 + (Y3 - point2y ).^2 + distanceOfPointAndScreen ^2);
distanceToPoint3 = sqrt(point3x ^2 + point3y ^2 + distanceOfSourseAndPoint ^2) + ...
    sqrt((X3 - point3x ).^2 + (Y3 - point3y ).^2 + distanceOfPointAndScreen ^2);
distanceToPoint4 = sqrt(point4x ^2 + point4y ^2 + distanceOfSourseAndPoint ^2) + ...
    sqrt((X3 - point4x ).^2 + (Y3 - point4y ).^2 + distanceOfPointAndScreen ^2);
distanceToPoint5 = sqrt(point5x ^2 + point5y ^2 + distanceOfSourseAndPoint ^2) + ...
    sqrt((X3 - point5x ).^2 + (Y3 - point5y ).^2 + distanceOfPointAndScreen ^2);
% 计算强度
finalIntensity3 = (amplitude *cos( 2 * pi * distanceToPoint1 / wavelength ) + ...
    amplitude *cos( 2 * pi * distanceToPoint2 / wavelength ) + ...
    amplitude *cos( 2 * pi * distanceToPoint3 / wavelength ) + ...
    amplitude *cos( 2 * pi * distanceToPoint4 / wavelength ) + ...
    amplitude *cos( 2 * pi * distanceToPoint5 / wavelength )).^2+...
    (amplitude*sin( 2 * pi * distanceToPoint1 / wavelength ) + ...
    amplitude *sin( 2 * pi * distanceToPoint2 / wavelength ) + ...
    amplitude *sin( 2 * pi * distanceToPoint3 / wavelength ) + ...
    amplitude *sin( 2 * pi * distanceToPoint4 / wavelength ) + ...
    amplitude *sin( 2 * pi * distanceToPoint5 / wavelength )).^2;

%% 四象限
% 计算距离
distanceToPoint1 = sqrt(point1x ^2 + point1y ^2 + distanceOfSourseAndPoint ^2) + ...
    sqrt((X4 - point1x ).^2 + (Y4 - point1y ).^2 + distanceOfPointAndScreen ^2);
distanceToPoint2 = sqrt(point2x ^2 + point2y ^2 + distanceOfSourseAndPoint ^2) + ...
    sqrt((X4 - point2x ).^2 + (Y4 - point2y ).^2 + distanceOfPointAndScreen ^2);
distanceToPoint3 = sqrt(point3x ^2 + point3y ^2 + distanceOfSourseAndPoint ^2) + ...
    sqrt((X4 - point3x ).^2 + (Y4 - point3y ).^2 + distanceOfPointAndScreen ^2);
distanceToPoint4 = sqrt(point4x ^2 + point4y ^2 + distanceOfSourseAndPoint ^2) + ...
    sqrt((X4 - point4x ).^2 + (Y4 - point4y ).^2 + distanceOfPointAndScreen ^2);
distanceToPoint5 = sqrt(point5x ^2 + point5y ^2 + distanceOfSourseAndPoint ^2) + ...
    sqrt((X4 - point5x ).^2 + (Y4 - point5y ).^2 + distanceOfPointAndScreen ^2);
% 计算强度
finalIntensity4 = (amplitude *cos( 2 * pi * distanceToPoint1 / wavelength ) + ...
    amplitude *cos( 2 * pi * distanceToPoint2 / wavelength ) + ...
    amplitude *cos( 2 * pi * distanceToPoint3 / wavelength ) + ...
    amplitude *cos( 2 * pi * distanceToPoint4 / wavelength ) + ...
    amplitude *cos( 2 * pi * distanceToPoint5 / wavelength )).^2+...
    (amplitude*sin( 2 * pi * distanceToPoint1 / wavelength ) + ...
    amplitude *sin( 2 * pi * distanceToPoint2 / wavelength ) + ...
    amplitude *sin( 2 * pi * distanceToPoint3 / wavelength ) + ...
    amplitude *sin( 2 * pi * distanceToPoint4 / wavelength ) + ...
    amplitude *sin( 2 * pi * distanceToPoint5 / wavelength )).^2;

clear distanceToPoint1 distanceToPoint2 distanceToPoint3 distanceToPoint4 distanceToPoint5;
%% 绘图
surf(X1,Y1,finalIntensity1 ./5); clear finalIntensity1;
hold on;
surf(X2,Y2,finalIntensity2 ./5); clear finalIntensity2;
surf(X3,Y3,finalIntensity3 ./5); clear finalIntensity3;
surf(X4,Y4,finalIntensity4 ./5); clear;
colormap(jet);
axis equal;
shading interp;
view(0,90);
title('五孔圆周均匀分布干涉');
hold off;

toc;